package com.axelor.studio.service;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.axelor.app.AppSettings;
import com.axelor.common.FileUtils;
import com.axelor.inject.Beans;
import com.axelor.studio.db.StudioConfiguration;
import com.axelor.studio.db.repo.StudioConfigurationRepository;
import com.google.inject.Singleton;

/**
 * Service provide configuration details support. It check build directory path
 * and create custom module's directory structure.
 * 
 * @author axelor
 *
 */
@Singleton
public class ConfigurationService {

	private File domainDir;

	private File viewDir;
	
	private File moduleDir;

	private String moduleName;

	private String depends;

	protected Logger log = LoggerFactory.getLogger(getClass());

	/**
	 * Root method of service that check build directory,resource directory for
	 * domain and views. It also call method to create custom module directory .
	 * 
	 * @return
	 */
	public ConfigurationService() {

		log.debug("Configuration service called");

		try {
			File buildDirectory = getBuildDirectory();
			if (buildDirectory == null) {
				log.error("Build directory not found.");
				return;
			}

			StudioConfiguration config = Beans
					.get(StudioConfigurationRepository.class).all().fetchOne();
			if (config != null) {
				moduleName = config.getName();
				depends = config.getDepends();
			}
			if (moduleName == null) {
				moduleName = "axelor-custom";
			}

			moduleDir = getCustomModule(buildDirectory);
			File resourceDir = getResourceDir(moduleDir);
			domainDir = getDir(resourceDir, "domains");
			viewDir = getDir(resourceDir, "views");

			log.debug("Resource directory found: {}", resourceDir.getPath());

			return;
		} catch (Exception e) {
			e.printStackTrace();
			log.error("Error in recording, please check the log.");
		}

		return;
	}

	public File getViewDir() {
		return this.viewDir;
	}

	public File getDomainDir() {
		return this.domainDir;
	}
	
	public File getModuleDir() {
		return this.domainDir;
	}

	public String getModuleName() {
		return this.moduleName;
	}

	/**
	 * Method to get build directory from property setting.
	 * 
	 * @return
	 */
	private File getBuildDirectory() {

		String buildPath = AppSettings.get().get("build.dir");

		if (buildPath != null) {
			File buildDir = new File(buildPath);
			if (buildDir.exists() && buildDir.isDirectory()) {
				return buildDir;
			}
		}

		return null;
	}

	/**
	 * Create resource directory structure(with src,main,resource) inside given
	 * custom module directory.
	 * 
	 * @param moduleDir
	 *            Custom module directory.
	 * @return Resource directory file.
	 */
	private File getResourceDir(File moduleDir) {

		File resourceDir = FileUtils.getFile(moduleDir, "src", "main",
				"resources");
		if (!resourceDir.exists()) {
			resourceDir.mkdirs();
		}

		return resourceDir;
	}

	/**
	 * Create directory inside given directory. Used for 'views' and 'domains'
	 * directory creation.
	 * 
	 * @param resourceDir
	 *            Resource directory.
	 * @param rootName
	 *            Name of directory to create
	 * @return New Directory file created.
	 * @throws IOException
	 *             Exception thrown in directory creation.
	 */
	public File getDir(File resourceDir, String rootName) throws IOException {

		File rootDir = FileUtils.getFile(resourceDir, rootName);

		if (!rootDir.exists()) {
			rootDir.mkdir();
		}

		return rootDir;
	}

	/**
	 * Create custom module directory inside root build directory given in
	 * configuration. It also create build file(build.gradle) for custom module.
	 * 
	 * @param buildDir
	 *            Build directory file.
	 * @return Custom module directory created.
	 */
	private File getCustomModule(File buildDir) {

		File moduleDir = FileUtils.getFile(buildDir, "modules", moduleName);

		if (!moduleDir.exists()) {
			moduleDir.mkdir();
		}

		File buildFile = FileUtils.getFile(moduleDir, "build.gradle");

		createBuildFile(buildFile);

		return moduleDir;
	}

	/**
	 * Method to write build file(build.gradle) content for custom module.
	 * 
	 * @param buildFile
	 *            Blank buildFile.
	 */
	private void createBuildFile(File buildFile) {

		try {
			FileWriter fw = new FileWriter(buildFile);
			String buildText = "apply plugin: 'axelor-module' \n"
					+ "module { \n" + "\t\t name \"" + moduleName + "\"\n"
					+ "\t\t title \"" + moduleName.toUpperCase() + " \"\n"
					+ "\t\t description \"\"\"\\\n"
					+ "Module generated by axelor studio\n" + "\"\"\"\n";

			if (depends != null) {
				for (String depend : depends.split(",")) {
					buildText += "\t\t module \"modules:" + depend + "\"\n";
				}
			}

			buildText += "\t\t removable false\n}";
			fw.write(buildText);
			fw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}
